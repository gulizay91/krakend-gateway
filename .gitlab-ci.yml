stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

default:
  image: docker:latest
  services:
    - docker:dind

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:v$CI_PIPELINE_ID
  K8S_NAMESPACE_DEV: k8s-ns-dev
  K8S_NAMESPACE_PROD: lk8s-ns-prod
  # Define the following variables via service
  SERVICE_APP_PATH: .
  SERVICE_NAME: krakend-gateway
  SERVICE_PORT: 8080
  DOCKER_CONTAINER_SERVICE_PORT: 8080
  # Define the following variables in your GitLab project's CI/CD settings
#  SERVER_HOST: $SERVER_HOST
#  SERVER_SSH_USER: $SERVER_SSH_USER
#  SERVER_SSH_PRIVATE_KEY: $SERVER_SSH_PRIVATE_KEY
#  $KUBE_SERVER: $KUBE_SERVER # This is the Kubernetes server URL.
#  $KUBE_TOKEN: $KUBE_TOKEN # This is the Kubernetes token.
#  $DO_API_TOKEN: $DO_API_TOKEN # This is the DigitalOcean API token.

build-docker-job-dev:
  stage: build
  image: docker:latest
  environment: development
  services:
    - docker:dind
  allow_failure: false
  variables:
    DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:v$CI_PIPELINE_ID
    SERVICE_ENVIRONMENT: dev
  before_script:
    - echo "Logging in to $CI_REGISTRY..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Docker build starting. buildNumber $CI_PIPELINE_ID and image-tag $DOCKER_IMAGE_TAG "
    - docker build --rm --build-arg ENV=$SERVICE_ENVIRONMENT -t $DOCKER_IMAGE_TAG $SERVICE_APP_PATH
    - docker push $DOCKER_IMAGE_TAG
    - echo "Docker build complete."
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: never
    - when: manual

deploy-docker-job-dev:
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: development
  variables:
    K8S_NAMESPACE: $K8S_NAMESPACE_DEV
    SERVICE_ENVIRONMENT: dev
    DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:v$CI_PIPELINE_ID
  before_script:
    - echo "server key $SERVER_SSH_PRIVATE_KEY server host $SERVER_HOST server user $SERVER_SSH_USER"
    # Set right chmod on SSH key file
    - chmod 400 $SERVER_SSH_PRIVATE_KEY
  script:
    - echo "Deploying application to docker to server ..."
    # Login to Gitlab Container registry
    - ssh -o StrictHostKeyChecking=no -i $SERVER_SSH_PRIVATE_KEY "${SERVER_SSH_USER}@${SERVER_HOST}" "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
    # Remove old containers and images if exists
    - ssh -o StrictHostKeyChecking=no -i $SERVER_SSH_PRIVATE_KEY "${SERVER_SSH_USER}@${SERVER_HOST}"
      docker rm -f ${CI_PROJECT_NAME} || true
    - ssh -o StrictHostKeyChecking=no -i $SERVER_SSH_PRIVATE_KEY "${SERVER_SSH_USER}@${SERVER_HOST}" "docker rmi -f \$(docker images -q $CI_REGISTRY_IMAGE) || true"
    # Download and run new image
    - ssh -o StrictHostKeyChecking=no -i $SERVER_SSH_PRIVATE_KEY "${SERVER_SSH_USER}@${SERVER_HOST}"
      docker run
      --name $CI_PROJECT_NAME
      -p $SERVICE_PORT:$DOCKER_CONTAINER_SERVICE_PORT
      -e ENV=$SERVICE_ENVIRONMENT
      -d $DOCKER_IMAGE_TAG
    - echo "Application successfully deployed to server."
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: never
    - when: manual


build-docker-job-prod:
  stage: build
  only:
    refs:
      - main
      - master
  when: manual
  image: docker:latest
  environment: production
  services:
    - docker:dind
  allow_failure: false
  variables:
    DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
    SERVICE_ENVIRONMENT: prod
  before_script:
    - echo "Logging in to $CI_REGISTRY..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Docker build starting. buildNumber $CI_PIPELINE_ID and image-tag $DOCKER_IMAGE_TAG "
    - docker build --rm --build-arg ENV=$SERVICE_ENVIRONMENT -t $DOCKER_IMAGE_TAG $SERVICE_APP_PATH
    - docker push $DOCKER_IMAGE_TAG
    - echo "Docker build complete."

deploy-k8s-job-prod:
  image: dtzar/helm-kubectl
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  only:
    refs:
      - main
      - master
  when: manual
  environment: production
  variables:
    K8S_NAMESPACE: $K8S_NAMESPACE_PROD
    K8S_CLUSTER_NAME: default
    SERVICE_ENVIRONMENT: prod
    DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
    MANIFEST_PATH: k8s-manifests
  before_script:
    - echo "server url $KUBE_SERVER server token $KUBE_TOKEN"
    - apk update && apk add gettext # envsubst
    # create the configuration (context) for our kubernetes cluster
    - kubectl config set-cluster $K8S_CLUSTER_NAME --server="$KUBE_SERVER" --insecure-skip-tls-verify
    - kubectl config set-credentials gitlab --token=$(echo $KUBE_TOKEN | base64 -d)
    - kubectl config set-context $K8S_CLUSTER_NAME --cluster=$K8S_CLUSTER_NAME --namespace=$K8S_NAMESPACE --user=gitlab
    - kubectl config use-context $K8S_CLUSTER_NAME
  script:
    - echo "Deploying application to kubernetes server ..."
    - envsubst < "$MANIFEST_PATH/namespace.yaml" > "$MANIFEST_PATH/namespace-replaced.yaml"
    - kubectl apply -f $MANIFEST_PATH/namespace-replaced.yaml  # create namespaces
    - envsubst < "$MANIFEST_PATH/deployment.yaml" > "$MANIFEST_PATH/deployment-replaced.yaml"
    - kubectl apply -f $MANIFEST_PATH/deployment-replaced.yaml  # This is your Kubernetes deployment script
    - envsubst < "$MANIFEST_PATH/service.yaml" > "$MANIFEST_PATH/service-replaced.yaml"
    - kubectl apply -f $MANIFEST_PATH/service-replaced.yaml  # This is your Kubernetes deployment script
    - echo "Application successfully deployed to kubernetes."

deploy-dok-job-prod:
    stage: deploy
    image: alpine:latest
    only:
      refs:
        - main
        - master
    when: manual
    environment: production
    variables:
      K8S_NAMESPACE: $K8S_NAMESPACE_PROD
      K8S_CLUSTER_NAME: default
      K8S_DOCKER_REGISTRY_SECRET_NAME: gitlab-registry-secret
      SERVICE_ENVIRONMENT: prod
      SERVICE_PORT: 8080
      DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
      MANIFEST_PATH: k8s-manifests
    before_script:
      - apk add --no-cache curl gettext
      - curl -LO "https://github.com/digitalocean/doctl/releases/download/v1.73.0/doctl-1.73.0-linux-amd64.tar.gz"
      - tar -xzvf doctl-1.73.0-linux-amd64.tar.gz
      - mv doctl /usr/local/bin/
      - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x ./kubectl
      - mv kubectl /usr/local/bin/
      - mkdir -p ~/.kube
      # DO_API_TOKEN to authenticate with DigitalOcean
      - doctl auth init -t $DO_API_TOKEN
      # DigitalOcean Kubernetes Cluster Info
      - doctl kubernetes cluster kubeconfig save $K8S_CLUSTER_NAME
      - envsubst < "$MANIFEST_PATH/namespace.yaml" > "$MANIFEST_PATH/namespace-replaced.yaml"
      - kubectl apply -f $MANIFEST_PATH/namespace-replaced.yaml  # create namespaces
      # Docker registry secret olu≈üturun
      - kubectl create secret docker-registry $K8S_DOCKER_REGISTRY_SECRET_NAME --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD --namespace=$K8S_NAMESPACE || true
    script:
      - echo "Deploying application to kubernetes server namespace $K8S_NAMESPACE ..."
      - envsubst < "$MANIFEST_PATH/deployment.yaml" > "$MANIFEST_PATH/deployment-replaced.yaml"
      - kubectl apply -f $MANIFEST_PATH/deployment-replaced.yaml  -n $K8S_NAMESPACE # This is your Kubernetes deployment script
      - envsubst < "$MANIFEST_PATH/service.yaml" > "$MANIFEST_PATH/service-replaced.yaml"
      - kubectl apply -f $MANIFEST_PATH/service-replaced.yaml  -n $K8S_NAMESPACE # This is your Kubernetes service script
      - echo "Application successfully deployed to kubernetes."