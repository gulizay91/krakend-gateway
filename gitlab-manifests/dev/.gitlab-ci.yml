build-docker-job-dev:
  stage: build
  image: docker:latest
  environment: development
  services:
    - docker:dind
  allow_failure: false
  variables:
    DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:v$CI_PIPELINE_ID
    SERVICE_ENVIRONMENT: dev
  before_script:
    - echo "Logging in to $CI_REGISTRY..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Docker build starting. buildNumber $CI_PIPELINE_ID and image-tag $DOCKER_IMAGE_TAG "
    - docker build --rm --build-arg ENV=$SERVICE_ENVIRONMENT -t $DOCKER_IMAGE_TAG $SERVICE_APP_PATH
    - docker push $DOCKER_IMAGE_TAG
    - echo "Docker build complete."
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: never
    - when: manual

deploy-docker-job-dev:
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: development
  variables:
    K8S_NAMESPACE: $K8S_NAMESPACE_DEV
    SERVICE_ENVIRONMENT: dev
    DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:v$CI_PIPELINE_ID
  before_script:
    - echo "server key $SERVER_SSH_PRIVATE_KEY server host $SERVER_HOST server user $SERVER_SSH_USER"
    # Set right chmod on SSH key file
    - chmod 400 $SERVER_SSH_PRIVATE_KEY
  script:
    - echo "Deploying application to docker to server ..."
    # Login to Gitlab Container registry
    - ssh -o StrictHostKeyChecking=no -i $SERVER_SSH_PRIVATE_KEY "${SERVER_SSH_USER}@${SERVER_HOST}" "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
    # Remove old containers and images if exists
    - ssh -o StrictHostKeyChecking=no -i $SERVER_SSH_PRIVATE_KEY "${SERVER_SSH_USER}@${SERVER_HOST}"
      docker rm -f ${CI_PROJECT_NAME} || true
    - ssh -o StrictHostKeyChecking=no -i $SERVER_SSH_PRIVATE_KEY "${SERVER_SSH_USER}@${SERVER_HOST}" "docker rmi -f \$(docker images -q $CI_REGISTRY_IMAGE) || true"
    # Download and run new image
    - ssh -o StrictHostKeyChecking=no -i $SERVER_SSH_PRIVATE_KEY "${SERVER_SSH_USER}@${SERVER_HOST}"
      docker run
      --name $CI_PROJECT_NAME
      -p $SERVICE_PORT:$DOCKER_CONTAINER_SERVICE_PORT
      -e ENV=$SERVICE_ENVIRONMENT
      -d $DOCKER_IMAGE_TAG
    - echo "Application successfully deployed to server."
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: never
    - when: manual