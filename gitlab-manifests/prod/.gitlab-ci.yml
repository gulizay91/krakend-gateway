build-docker-job-prod:
  stage: build
  only:
    refs:
      - main
      - master
  when: manual
  image: docker:latest
  environment: production
  services:
    - docker:dind
  allow_failure: false
  variables:
    DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
    SERVICE_ENVIRONMENT: prod
  before_script:
    - echo "Logging in to $CI_REGISTRY..."
    - docker login $CI_REGISTRY -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD
  script:
    - echo "Docker build starting. buildNumber $CI_PIPELINE_ID and image-tag $DOCKER_IMAGE_TAG "
    - docker build --rm --build-arg ENV=$SERVICE_ENVIRONMENT -t $DOCKER_IMAGE_TAG $SERVICE_APP_PATH
    - docker push $DOCKER_IMAGE_TAG
    - echo "Docker build complete."

deploy-k8s-job-prod:
  image: dtzar/helm-kubectl
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  only:
    refs:
      - main
      - master
  when: manual
  environment: production
  variables:
    K8S_NAMESPACE: $K8S_NAMESPACE_PROD
    K8S_CLUSTER_NAME: default
    SERVICE_ENVIRONMENT: prod
    DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
    MANIFEST_PATH: k8s-manifests
  before_script:
    - echo "server url $KUBE_SERVER server token $KUBE_TOKEN"
    - apk update && apk add gettext # envsubst
    # create the configuration (context) for our kubernetes cluster
    - kubectl config set-cluster $K8S_CLUSTER_NAME --server="$KUBE_SERVER" --insecure-skip-tls-verify
    - kubectl config set-credentials gitlab --token=$(echo $KUBE_TOKEN | base64 -d)
    - kubectl config set-context $K8S_CLUSTER_NAME --cluster=$K8S_CLUSTER_NAME --namespace=$K8S_NAMESPACE --user=gitlab
    - kubectl config use-context $K8S_CLUSTER_NAME
  script:
    - echo "Deploying application to kubernetes server ..."
    - envsubst < "$MANIFEST_PATH/namespace.yaml" > "$MANIFEST_PATH/namespace-replaced.yaml"
    - kubectl apply -f $MANIFEST_PATH/namespace-replaced.yaml  # create namespaces
    - envsubst < "$MANIFEST_PATH/deployment.yaml" > "$MANIFEST_PATH/deployment-replaced.yaml"
    - kubectl apply -f $MANIFEST_PATH/deployment-replaced.yaml  # This is your Kubernetes deployment script
    - envsubst < "$MANIFEST_PATH/service.yaml" > "$MANIFEST_PATH/service-replaced.yaml"
    - kubectl apply -f $MANIFEST_PATH/service-replaced.yaml  # This is your Kubernetes deployment script
    - echo "Application successfully deployed to kubernetes."

deploy-dok-job-prod:
    stage: deploy
    image: alpine:latest
    only:
      refs:
        - main
        - master
    when: manual
    environment: production
    variables:
      K8S_NAMESPACE: $K8S_NAMESPACE_PROD
      K8S_CLUSTER_NAME: k8s-default-cluster
      K8S_DOCKER_REGISTRY_SECRET_NAME: gitlab-registry-secret-$SERVICE_NAME
      K8S_LOAD_BALANCER_NAME: a4a5dd5cfbdf94c998dea1464f840efc
      K8S_SERVICE_HTTP_NODE_PORT: 30010
      K8S_SERVICE_HTTPS_NODE_PORT: 30011
      SERVICE_ENVIRONMENT: prod
      SERVICE_PORT: 8080
      DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
      MANIFEST_PATH: k8s-manifests
    before_script:
      - apk add --no-cache curl gettext
      - curl -LO "https://github.com/digitalocean/doctl/releases/download/v1.73.0/doctl-1.73.0-linux-amd64.tar.gz"
      - tar -xzvf doctl-1.73.0-linux-amd64.tar.gz
      - mv doctl /usr/local/bin/
      - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x ./kubectl
      - mv kubectl /usr/local/bin/
      - mkdir -p ~/.kube
      # DO_API_TOKEN to authenticate with DigitalOcean
      - doctl auth init -t $DO_API_TOKEN
      # DigitalOcean Kubernetes Cluster Info
      - doctl kubernetes cluster kubeconfig save $K8S_CLUSTER_NAME
      - envsubst < "$MANIFEST_PATH/namespace.yaml" > "$MANIFEST_PATH/namespace-replaced.yaml"
      - kubectl apply -f $MANIFEST_PATH/namespace-replaced.yaml  # create namespaces
      # Add port forwarding (remove existing one)
      # LOAD_BALANCER_ID=$(doctl compute load-balancer list --format ID,Name --no-header | grep "your-load-balancer-name" | awk '{print $1}')
      # doctl compute load-balancer add-forwarding-rules $LOAD_BALANCER_ID --forwarding-rules entry_protocol:http,entry_port:80,target_protocol:http,target_port:<ServiceNodePort>
      - doctl compute load-balancer remove-forwarding-rules $(doctl compute load-balancer list --format ID,Name --no-header | grep $K8S_LOAD_BALANCER_NAME | awk '{print $1}') --forwarding-rules entry_protocol:http,entry_port:$SERVICE_PORT,target_protocol:http,target_port:$K8S_SERVICE_HTTP_NODE_PORT || true
      - doctl compute load-balancer add-forwarding-rules $(doctl compute load-balancer list --format ID,Name --no-header | grep $K8S_LOAD_BALANCER_NAME | awk '{print $1}') --forwarding-rules entry_protocol:http,entry_port:$SERVICE_PORT,target_protocol:http,target_port:$K8S_SERVICE_HTTP_NODE_PORT || true
      # Docker registry secret
      - kubectl delete secret -n $K8S_NAMESPACE $K8S_DOCKER_REGISTRY_SECRET_NAME --ignore-not-found || true
      - kubectl create secret docker-registry $K8S_DOCKER_REGISTRY_SECRET_NAME --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD --namespace=$K8S_NAMESPACE || true
    script:
      - echo "Deploying application to kubernetes server namespace $K8S_NAMESPACE ..."
      - envsubst < "$MANIFEST_PATH/deployment.yaml" > "$MANIFEST_PATH/deployment-replaced.yaml"
      - kubectl apply -f $MANIFEST_PATH/deployment-replaced.yaml  -n $K8S_NAMESPACE # This is your Kubernetes deployment script
      - envsubst < "$MANIFEST_PATH/service.yaml" > "$MANIFEST_PATH/service-replaced.yaml"
      - kubectl apply -f $MANIFEST_PATH/service-replaced.yaml  -n $K8S_NAMESPACE # This is your Kubernetes service script
      - echo "Application successfully deployed to kubernetes."